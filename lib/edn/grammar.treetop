# TODO
# - comments and discards

require 'edn/nodes'

module EDN
  grammar Grammar
    rule value
      ws? value:(tagged_value / base_value) ws? <ValueNode>
    end

    rule values
      value*
    end

    rule pair
      value value
    end

    rule pairs
      pair*
    end
    
    rule tagged_value
      tag ws base_value <TaggedValueNode>
    end
  
    rule base_value
      (map /
       vector /
       list /
       set /
       string /
       regexp /
       character /
       float /
       integer /
       keyword /
       boolean /
       nil /
       symbol) <BaseValueNode>
    end
  
    # Collections
  
    rule map
      '{' pairs '}' <MapNode>
    end
  
    rule set
      '#{' values '}' <SetNode>
    end
  
    rule vector
      '[' values ']' <VectorNode>
    end
  
    rule list
      '(' values ')' <ListNode>
    end

    # Primitives
  
    rule regexp
      '#' regexp:string <RegexpNode>
    end
  
    rule string
      '"' ('\"' / !'"' .)* '"' <StringNode>
    end
  
    rule character
      '\\' character:('newline' / 'space' / 'tab' / [^\s,]) <CharacterNode>
    end
    
    rule integer
      '-'?
      ('0' / [1-9] [0-9]*)
      'N'?
      <IntegerNode>
    end
  
    rule float
      '-'?
      ('0' / [1-9] [0-9]*)
      ('.' [0-9]+)
      ([eE] [+-]? [0-9]+)?
      'M'?
      <FloatNode>
    end
  
    rule boolean
      'true' <BooleanNode> /
      'false' <BooleanNode>
    end
  
    rule nil
      'nil' <NilNode>
    end
  
    rule keyword
      ':' keyword:(symbol_chars ('/' symbol_chars)?) <KeywordNode>
    end
  
    rule symbol
      (symbol_chars ('/' symbol_chars)? / '/') <SymbolNode>
    end
  
    # Parts
  
    rule tag
      '#' symbol_chars ('/' symbol_chars)?
    end
  
    rule symbol_chars
      [\w\*\+\!\?] [\w\.\*\+\!\-\?\:\#]* /
      [\-\.] (alpha / [\.\*\+!\-_\?\:\#]) [\w\.\*\+!\-\?\:\#]*
    end
  
    rule alpha
      [A-Za-z]
    end
  
    rule ws
      [\s,]+
    end
  end
end
